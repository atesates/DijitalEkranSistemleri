@model Konum

@{
    ViewBag.Title = "Konum Ekle |  Dijital Ekran";
}
<body>
    <h4>Konum Ekle</h4>
    <hr />

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })


        <div class="card">
            <div class="card-body">

                <div class="form-row">
                    <div class="form-group col-md-4">
                        <div class="form-group col-md-12">
                            @*@Html.LabelFor(model => model.Adi, "Eczane Adı", htmlAttributes: new { @class = "control-label" })*@
                            @Html.EditorFor(model => model.Adi, new { htmlAttributes = new { @class = "form-control", placeHolder = "Adi" } })
                            @Html.ValidationMessageFor(model => model.Adi, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-md-12">
                            @*@Html.LabelFor(model => model.Adi, "Eczane Adı", htmlAttributes: new { @class = "control-label" })*@
                            @Html.EditorFor(model => model.Aciklama, new { htmlAttributes = new { @class = "form-control", placeHolder = "Açıklama" } })
                            @Html.ValidationMessageFor(model => model.Aciklama, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-md-12">
                            Kullanıcı
                            @*@Html.LabelFor(model => model.NobetUstGrupId, "Üst Grup", htmlAttributes: new { @class = "control-label col-2" })*@
                                                @Html.DropDownList("GrupId", null, htmlAttributes: new { @class = "form-control" })
                        </div>
                        <div class="form-group col-md-12">
                            Enlem ve Boylamı haritadan seçebilirsiniz.

                            @*@Html.LabelFor(model => model.AcilisTarihi, htmlAttributes: new { @class = "control-label" })*@
                            <div class="input-group" style="margin-top:10px">
                                <div class="input-group-prepend">
                                    <span class="input-group-text p-2">
                                        <i class="fa fa-globe" aria-hidden="true"></i>
                                    </span>
                                </div>
                                @Html.TextBoxFor(model => model.Enlem, new { @id = "enlem", @class = "form-control", autocomplete = "off", placeHolder = "Enlem" })
                            </div>
                            @Html.ValidationMessageFor(model => model.Enlem, "", new { @class = "text-danger" })
                        </div>

                        <div class="form-group col-md-12">
                            @*@Html.LabelFor(model => model.KapanisTarihi, htmlAttributes: new { @class = "control-label" })*@
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text p-2">
                                        <i class="fa fa-globe" aria-hidden="true"></i>
                                    </span>
                                </div>
                                @Html.TextBoxFor(model => model.Boylam, new { @id = "boylam", @class = "form-control", autocomplete = "off", placeHolder = "Boylam" })
                            </div>
                            @Html.ValidationMessageFor(model => model.Boylam, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-md-12" style="display:block">
                            Başlama Tarihi
                            @*@Html.LabelFor(model => model.MailAdresi, htmlAttributes: new { @class = "control-label" })*@
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text p-2">
                                        <i class="fa fa-calendar" aria-hidden="true"></i>
                                    </span>
                                </div>
                                @Html.EditorFor(model => model.BaslamaTarihi, new { htmlAttributes = new { @class = "form-control datepicker p-2", autocomplete = "off", placeHolder = "Başlama Tarihi" } })
                            </div>
                            @Html.ValidationMessageFor(model => model.BaslamaTarihi, "", new { @class = "text-danger" })
                        </div>


                        <div class="form-group col-md-12">

                            <div class="form-group">
                                <input type="submit" value="Ekle" class="btn btn-primary" />
                                @Html.ActionLink("Listeye Dön", "Index", null, new { @class = "btn btn-warning" })
                            </div>
                        </div>
                    </div>

                    <div class="form-group col-md-8">

                        <div id="map" style="width: 83%; height: 400px;"></div>
                    </div>
                </div>


            </div>
        </div>
        <div class="col-12">
            @if (TempData["MessageSuccess"] != null)
            {
                @*<p>&nbsp;</p>*@
                <div class="alert alert-success">
                    <i class="fa fa-info-circle fa-x"></i>

                    @TempData["MessageSuccess"]
                </div>
            }
            @if (TempData["MessageDanger"] != null)
            {

                <div class="alert alert-danger">
                    <i class="fa fa-info-circle fa-x"></i>

                    @TempData["MessageDanger"]
                </div>
            }


        </div>
    }

    @section Styles{
        @Styles.Render("~/bundle/bootstrap-datepicker/style")
    }

    @section Scripts{
        @Scripts.Render("~/bundle/bootstrap-datepicker/scripts")

        @Scripts.Render("~/bundle/bootstrap-select/scripts")
        @Scripts.Render("~/bundle/ajax")
        @*@Scripts.Render("~/bundle/validation/scripts")*@
        @*@Scripts.Render("~/bundle/globalize/scripts")*@
    }
    <script>
        setTimeout(function () {
            $('.alert-success').addClass("elemaniUcur");
        }, 4000);
        setTimeout(function () {
            $('.alert-danger').addClass("elemaniUcur");
        }, 4000);

        function myMap() {
            //alert('1')
            var mapCanvas = document.getElementById("map");
            var myCenter = { lat: 39.195533, lng: 34.66287 };
            var mapOptions = {
                center: myCenter,
                zoom: 5,
                disableDefaultUI: true
            };

            var map = new google.maps.Map(mapCanvas, mapOptions);
            var map;
            var markers = [];

            // This event listener will call addMarker() when the map is clicked.
            map.addListener('click', function (event) {
                deleteMarkers()
                addMarker(event.latLng);

                $('#enlem').val(event.latLng.lat)
                $('#boylam').val(event.latLng.lng)

                $("#enlem").val($("#enlem").val().replace(".", ","));
                $("#boylam").val($("#boylam").val().replace(".", ","));

            });

            // Adds a marker at the center of the map.
            //addMarker(myCenter);

            // Adds a marker to the map and push to the array.
            function addMarker(location) {
                var marker = new google.maps.Marker({
                    position: location,
                    map: map
                });
                markers.push(marker);
            }

            function addMarker(location) {
                var marker = new google.maps.Marker({
                    position: location,
                    map: map
                });
                markers.push(marker);
            }
            function setMapOnAll(map) {
                if (markers)
                    for (var i = 0; i < markers.length; i++) {
                        markers[i].setMap(map);
                    }
            }
            // Removes the markers from the map, but keeps them in the array.
            function clearMarkers() {
                setMapOnAll(null);
            }
            // Deletes all markers in the array by removing references to them.
            function deleteMarkers() {
                clearMarkers();
                markers = [];
            }

        }
    </script>

    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAP29ma6oCPNwQPFdXbilDCYBKP2Gk52CE&callback=myMap">
    </script>

</body>
