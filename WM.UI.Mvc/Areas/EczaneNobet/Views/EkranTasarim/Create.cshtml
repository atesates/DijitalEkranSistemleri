@model WM.Northwind.Entities.Concrete.EczaneNobet.EkranTasarim

<h4>Ekran Tasarımı Oluştur</h4>
<hr />

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="card">
        <div class="card-body">
            <div class="form-horizontal">

                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="col-10">
                    @if (TempData["MessageSuccess"] != null)
                    {
                        @*<p>&nbsp;</p>*@
                        <div class="alert alert-success">
                            <i class="fa fa-info-circle fa-x"></i>
                            @TempData["MessageSuccess"]
                        </div>
                    }
                    @if (TempData["MessageDanger"] != null)
                    {
                        <div class="alert alert-danger">
                            <i class="fa fa-info-circle fa-x"></i>
                            @TempData["MessageDanger"]
                        </div>
                    }
                </div>
                <div class="form-group col-md-10">
                    @*@Html.LabelFor(model => model.MailAdresi, htmlAttributes: new { @class = "control-label" })*@
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text p-2">
                                <i class="fa fa-file-text" aria-hidden="true"></i>
                            </span>
                        </div>
                        @Html.EditorFor(model => model.Adi, new { htmlAttributes = new { @class = "form-control", placeHolder = "Adı" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.Adi, "", new { @class = "text-danger" })
                </div>               
                <div class="form-group col-md-10">
                    Kullanıcı
                    @*@Html.LabelFor(model => model.NobetUstGrupId, "Üst Grup", htmlAttributes: new { @class = "control-label col-2" })*@
                                        @Html.DropDownList("GrupId", null, htmlAttributes: new { @class = "form-control" })
                </div>
                <div class="form-group col-md-10">
                    @*@Html.LabelFor(model => model.MailAdresi, htmlAttributes: new { @class = "control-label" })*@
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text p-2">
                                <i class="fa fa-tag" aria-hidden="true"></i>
                            </span>
                        </div>
                        @Html.EditorFor(model => model.Aciklama, new { htmlAttributes = new { @class = "form-control", placeHolder = "Açıklama" } })
                    </div>
                    @Html.ValidationMessageFor(model => model.Aciklama, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Ekle" id="btnEkle" class="btn btn-sm btn-primary" />
                        @Html.ActionLink("Listeye Dön", "Index", null, new { @class = "btn btn-sm btn-warning" })
                         <a class="btn btn-sm btn-outline-success" href="@Url.Action( "Index",  "Ekran", new { area= "EczaneNobet" })">Ekranlara Dön</a>

                    </div>
                </div>
            </div>
        </div>
    </div>
}

@section Styles{
    @Styles.Render("~/bundle/jqueryui/style")
}
@section Scripts{
    @Scripts.Render("~/bundle/queryui/scripts")

    <script>
        setTimeout(function () {
            $('.alert-success').addClass("elemaniUcur");
        }, 4000);
        setTimeout(function () {
            $('.alert-danger').addClass("elemaniUcur");
        }, 4000);

        setTimeout(function () { $('.alert').fadeOut(500); }, 3000);

        $(".datepicker").datepicker({
            dateFormat: "dd.mm.yy",
            changeYear: true,
            monthNames: ["Ocak", "Şubat", "Mart", "Nisan", "Mayıs", "Haziran", "Temmuz", "Ağustos", "Eylül", "Ekim", "Kasım", "Aralık"],
            dayNamesMin: ["Pa", "Pt", "Sl", "Ça", "Pe", "Cu", "Ct"],
            firstDay: 1
        });
    </script>

}
